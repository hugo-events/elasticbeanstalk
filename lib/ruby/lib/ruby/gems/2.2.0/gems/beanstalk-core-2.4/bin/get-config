#!/opt/elasticbeanstalk/lib/ruby/bin/ruby

#==============================================================================
# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use
# this file except in compliance with the License. A copy of the License is
# located at
#
#       https://aws.amazon.com/asl/
#
# or in the "license" file accompanying this file. This file is distributed on
# an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
# implied. See the License for the specific language governing permissions
# and limitations under the License.
#==============================================================================

require 'json'
require 'optparse'
require 'ostruct'
require 'yaml'

require 'elasticbeanstalk/container-config-manager'
require 'elasticbeanstalk/environment-metadata'

OUTPUT_FORMATS = [:JSON, :YAML]
CATEGORY_DESC_FORMATTER = "    %-32s %s"
options = OpenStruct.new
options.output = :JSON

option_parser = OptionParser.new do |opts|
    opts.banner = "Usage: get-config CATEGORY [OPTIONS]"
    opts.separator("")
    opts.separator("Categories: ")
    opts.separator(CATEGORY_DESC_FORMATTER % ["optionsettings", "environment option settings that affect instance"])
    opts.separator(CATEGORY_DESC_FORMATTER % ["container", "container specific configurations"])
    opts.separator(CATEGORY_DESC_FORMATTER % ["addons", "addon configurations"])
    opts.separator(CATEGORY_DESC_FORMATTER % ["environment", "environment variables"])
    opts.separator(CATEGORY_DESC_FORMATTER % ["meta", "EB environment meta-data"])
    opts.separator("")
    opts.separator("Options:")

    #
    # universal
    #
    opts.on("-k", "--key KEY", "Key of specific configuration or environment variable.") do |key|
        options.key = key
    end

    opts.on("--output OUTPUT_FORMAT", "Output format. Can be JSON or YAML. Default is JSON.") do |output|
        options.output = output.upcase.to_sym
    end

    #
    # optionsettings
    #
    opts.on("-n", "--namespace NAMESPACE", "Option Setting namespace for retrieval. Only applied to Category optionsettings.") do |namespace|
        options.namespace = namespace
    end

    opts.on("-o", "--option-name OPTION_NAME", "Option Setting name for retrieval. Only applied to Category optionsettings.") do |option_name|
        options.option_name = option_name
    end

    #
    # addons
    #
    opts.on("-a", "--add-on ADDON", "Add-on name. Only applied to Category addons.") do |addon|
        options.addon = addon
    end
        
    opts.on("-h", "--help", "Help") do
        puts option_parser
        exit
    end
end

option_parser.parse!

category = ARGV.pop
abort "Category is required.\n#{option_parser}" unless category
abort "Output format '#{options.output}' is not supported." unless OUTPUT_FORMATS.include?(options.output)

begin
    case category.downcase
    when 'optionsettings'
        config_manager = ElasticBeanstalk::ContainerConfigManager.new
        result = config_manager.optionsetting(options.namespace, options.option_name)
    when 'addons'
        config_manager = ElasticBeanstalk::ContainerConfigManager.new
        result = config_manager.addon_config(options.addon, options.key)
    when 'container'
        config_manager = ElasticBeanstalk::ContainerConfigManager.new
        result = config_manager.container_config(options.key)
    when 'environment'
        config_manager = ElasticBeanstalk::ContainerConfigManager.new
        result = config_manager.environment_variables(options.key)
    when 'meta'
        env_metadata = ElasticBeanstalk::EnvironmentMetadata.new
        case options.key
        when 'launchs3url'
            result = env_metadata.launch_s3_url
        when 'instance_signal_url'
            result = env_metadata.instance_signal_url
        when 'sqsdconfig'
            result = env_metadata.metadata(path: "AWS::ElasticBeanstalk::Ext||_SqsDaemonConfigFileContent")
        when 'envid'
            result = env_metadata.environment_id
        when 'stackname'
            result = env_metadata.stack_name
        else
            abort("Invalid meta key '#{options.key}'.")
        end
    else
        abort("Invalid category '#{category}'.\n#{option_parser}")
    end

    if result.is_a?(Enumerable)
        # only convert when result is a collection/enumerable
        case options.output
        when :JSON
            print result.to_json
        when :YAML
            print result.to_yaml
        end
    else
        print result
    end

rescue => ex
    abort("#{ex.message}\n")
end
